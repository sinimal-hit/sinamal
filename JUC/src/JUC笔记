1.什么是JUC
    java.util.concurrent
    java.util.concurrent.atomic
    java.util.concurrent.locks
------------------------------------------------------------------------------------
2.线程和进程
    进程:可执行的程序,一个进程可以包含多个线程,至少包含一个
    java默认有两个线程,main 和GC

    线程是cpu调度的最小单位
------------------------------------------------------------------------------------
3.并发和并行
    并发(多个线程操作同一个资源)
        CPU(单核),模拟出来多条线程,快速交替,
    并行:(多个人一起行走)
        CPU多核,多个线程可以同时执行

    并发编程的本质是:充分利用CPU的资源;
------------------------------------------------------------------------------------
4.线程一共有几个状态?<6个状态>
    public enum State {
            //新生/创建状态
            NEW,

            //运行状态
            RUNNABLE,

            //阻塞状态
            BLOCKED,

            //等待状态
            WAITING,

            //超时等待
            TIMED_WAITING,

            //终止
            TERMINATED;
        }
------------------------------------------------------------------------------------
5.wait和sleep区别
    ①来自不同的类,
        wait-->Object
        sleep-->Thread
    ②关于锁的释放
        wait方法会释放锁
        sleep方法不会释放锁,sleep睡觉,相当于抱着锁睡觉
    ③使用的范围不同
        wait
            只能在同步代码块中使用
        sleep:
            可以在任何位置使用

------------------------------------------------------------------------------------
6.Lock锁
    6.1传统的Synchronized
        详见com.doer.saleTicket.*;

    6.2 Lock接口
        所已知实现类
            ReentrantLock 可重入锁(常用方式)
            ReentrantReadWriteLock.ReadLock 读锁
            ReentrantReadWriteLock.WriteLock 写锁

    6.3构造方法
            public ReentrantLock() {
                sync = new NonfairSync(); //无参默认是非公平锁
            }


            public ReentrantLock(boolean fair) {
                sync = fair ? new FairSync() : new NonfairSync(); //true为公平锁
            }

    6.4 公平锁与非公平锁
        公平锁:
            十分公平,可以先来后到

        非公平锁:
            十分不公平,可以插队(默认)


    6.5 synchronized 和 Lock的区别
        1. synchronized是内置java的关键字, Lock是java的一个接口

        2. synchronized无法获取锁的状态,Lock可以判断是否可以获取到了锁

        3. synchronized是自动释放锁,lock必须要手动释放锁,如果不释放锁,就是死锁

        4.synchronized 例如两个线程(线程1,线程2)
            线程1获得锁, 线程2等待
            线程1阻塞,线程2继续等待
          但是lock不一定会一直等待下去

        5.synchronized可重入锁,不可以中断的,非公平锁 lock可重入锁,可以判断所,非公平(可以自己设置)

        6.synchronized适合锁少量的代码同步问题,lock适合锁大量的同步代码

    6.6生产者和消费者问题

         生产者和消费者问题synchronized版本  com.doer.productConsumer.A 和 B.java

         JUC版本的 详见 com.doer.productConsumer.C

    6.7 Condition
        6.6中提到Condition JUC版本的生产者消费者模式存在一问题:
            就是每一个被唤醒的线程都是随机的,不能保证有序的唤醒
        Condition因素出Object监视器方法（ wait ， notify和notifyAll ）成不同的对象，
            以得到具有多个等待集的每个对象，通过将它们与使用任意的组合的效果Lock个实现。 Lock替换
            synchronized方法和语句的使用， Condition取代了对象监视器方法的使用。

        Condition精准的唤醒线程
            详见com.doer.productConsumer.D
------------------------------------------------------------------------------------
7.什么是锁,如何判断锁的是谁(8锁现象) 详见com.doer.lock8
    深刻理解我们的锁


    小结:
    锁的是:
        new this具体的手机
        static 模板

------------------------------------------------------------------------------------
8.集合类不安全
    List不安全, 详见com.doer.unsafe.ListTest.java

    Set同样也不安全 详见com.doer.unsafe.SetTest.java

    hashSet的底层是什么?
        底层就是hashMap
        public HashSet() {
            map = new HashMap<>();
        }

        add Set本质就是map的key是无法重复的
        public boolean add(E e) {
            return map.put(e, PRESENT)==null;
        }


    ConcurrentHashMap
------------------------------------------------------------------------------------

9.Callable
    官方文档说明:
        Callable接口类似于Runnable ，因为它们都是为其实例可能由另一个线程执行的类设计的。
            然而，A Runnable不返回结果，也不能抛出被检查的异常。
    1.可以有返回值
    2.可以抛出异常
    3.方法不同 run()/call()

    代码测试
     详见com.doer.callable.CallableTest


    细节:
        1.Callable 会有缓存
        2.结果可能需要等待,会阻塞
------------------------------------------------------------------------------------
10.常用的辅助类 详见com.doer.familiar.*;

    10.1,CountDownLatch
        允许一个或多个线程等待直到在其他线程中执行的一组操作完成的同步辅助。

        原理:
            countDownLatch.countDown();//数量减一
            countDownLatch.await(); //等待计数器归零,然后在向下执行

        每次有线程调用countDown(),数量-1,假设计数器变为0,countDownLatch.await()就会被唤醒,继续执行

    10.2 CyclicBarrier
        允许一组线程全部等待彼此达到共同屏障点的同步辅助。
        也就是加法计数器

    10.3 Semaphore 信号量
        一个计数信号量。 在概念上，信号量维持一组许可证。 如果有必要，每个acquire()都会阻塞，
            直到许可证可用，然后才能使用它。 每个release()添加许可证，潜在地释放阻塞获取方。
            但是，没有使用实际的许可证对象; Semaphore只保留可用数量的计数，并相应地执行。

        原理:
            semaphore.acquire(); 获得,假设如果已经满了,等待,等待被释放为止
            semaphore.release(); 释放,会将当前的信号量释放+1,然后唤醒等待的线程
        作用:
            多个共享资源互斥的使用!并发限流,控制最大的线程数!!

------------------------------------------------------------------------------------
11.读写锁(ReadWriteLock)
    详见com.doer.readwrite.*;
    读的时候可以由多个线程来读,写的时候只能有一个线程去写
------------------------------------------------------------------------------------
12.阻塞队列
    详见:com.doer.blockingqueue.BlockingQueueDemo.java;
    BlockingQueue
        该接口的直接父类时Collection 和 Set List平级

    什么时候会使用BlockingQueue?
        多线程并发处理,和线程池

    阻塞队列的父子结构 详见画图板

    四组API
        1.抛出异常
        2.不会抛出异常
        3.阻塞等待
        4.超时等待


------------------------------------------------------------------------------------
13.同步队列
    SynchronousQueue   详见com.doer.blockingqueue.SynchronousQueueDemo.java
    没有容量,进去一个元素,必须等待取出来之后,才能再往里面放一个元素
    put,take
------------------------------------------------------------------------------------
14.线程池 (重点) com.doer.poll.*;


    池化技术:事先准备好一些资源,有人要用,就来我这里拿,用完之后还给我
        程序的运行就会占用系统的资源! 需要优化资源的使用-->池化技术
    线程池,连接池,内存池


    线程池的好处
        1.降低资源的消耗
        2.提高响应的速度
        3.方便管理

    线程池的作用
        线程复用,可以控制最大并发数,并且管理线程


    线程池:面试:三大方法,7大参数,4中拒绝策略

    14.1,线程池三大方法  com.doer.poll.Demo01.java

    14.2,七大参数
        源码分析
            public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory) {
                    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,
                                                  60L, TimeUnit.SECONDS,
                                                  new SynchronousQueue<Runnable>(),
                                                  threadFactory);
                }

            public static ExecutorService newFixedThreadPool(int nThreads) {
                    return new ThreadPoolExecutor(nThreads, nThreads,
                                                  0L, TimeUnit.MILLISECONDS,
                                                  new LinkedBlockingQueue<Runnable>());
                }

            public static ExecutorService newCachedThreadPool() {
                    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,
                                                  60L, TimeUnit.SECONDS,
                                                  new SynchronousQueue<Runnable>());
                }

        本质都是new ThreadPollExecutor
            public ThreadPoolExecutor(int corePoolSize, //核心线程池大小
                                      int maximumPoolSize, //最大核心线程池大小
                                      long keepAliveTime, //空闲时间数量
                                      TimeUnit unit, //超时单位
                                      BlockingQueue<Runnable> workQueue, //阻塞队列
                                      ThreadFactory threadFactory, //线程工厂,创建线程,一般不用动
                                      RejectedExecutionHandler handler) { //拒绝策略
                if (corePoolSize < 0 ||
                    maximumPoolSize <= 0 ||
                    maximumPoolSize < corePoolSize ||
                    keepAliveTime < 0)
                    throw new IllegalArgumentException();
                if (workQueue == null || threadFactory == null || handler == null)
                    throw new NullPointerException();
                this.acc = System.getSecurityManager() == null ?
                        null :
                        AccessController.getContext();
                this.corePoolSize = corePoolSize;
                this.maximumPoolSize = maximumPoolSize;
                this.workQueue = workQueue;
                this.keepAliveTime = unit.toNanos(keepAliveTime);
                this.threadFactory = threadFactory;
                this.handler = handler;
            }


    14.3 手动创建一个线程池 4中拒绝策略
        详见pool.Demo02.java


    14.4 线程池的最大线程应该如何定义
        1,CPU  密集型, 几核CPU就是最大线程就是几,可以保持CPU的效率最高

        2, IO密集型  判断程序中十分耗IO的线程,
            例如程序有15个大型IO任务, 十分消耗资源, 可以将最大的线程数设置为2倍,


----------------------------------------------------------------------------------------
15.四大函数式接口(必须掌握)
    lambda表达式,链式接口,函数式接口,Stream流式计算

    什么是函数是接口?
        只有一个方法的接口,例如Runnable,Callable

    Function函数式接口,有一个输入参数,有一个输出参数,
        详见com.doer.function.Demo01.java

    Predicate 断定行接口,有一个输入参数,返回值只能是布尔值
        详见com.doer.function.Demo02.java

    Consumer 消费性接口 只有一个参数,没有返回值类型
        详见com.doer.function.Demo03.java

    Supplier 供给型接口 没有参数,有返回值类型

----------------------------------------------------------------------------------------
16.Stream流式计算
      什么是Stream流式计算? 感觉可太难了,放弃了
        大数据时代 就是存储+计算
           存储 集合  Mysql 本质就是存储东西的
           计算?? 都应该交给流来操作

      详见com.doer.stream.Test
      反正是看不懂

----------------------------------------------------------------------------------------

17.ForkJoin
    分支合并
    什么是ForkJoin
        ForkJoin在JDK1.7,并行执行任务,提高效率,大量数据
        相当于大数据:Map Reduce思想(把大任务拆分成小任务的思想) 分治思想

    ForkJoin特点,工作窃取
        可以这样理解:现在有两个线程,A和B A线程比B线程开始的时间慢, B线程先把任务执行完毕,A线程的任务还没有
        执行完,此时B线程会把A线程的任务窃取来执行,不让B线程等待

----------------------------------------------------------------------------------------
18.JMM 与 volatile 详见com.doer.tvolatile.*;
    面试问题,请你谈谈volatile关键字
        volatile是java虚拟机提供的轻量级的同步机制
        1,保证可见性
        2,不保证原子性
        3,禁止指令重排序

        其他线程立刻从缓存得到修改后的东西是缓存一致性总线嗅探的结果,当前线程改了立即刷新到主存是volatile干的

        关于主内存与工作内存之间的具体协议,即一个变量如何从主内存拷贝到工作内存,如何从工作内存同步到主内存
            之间的实现细节,java内存模型定义了8中操作来完成

            详见 IDEA/hutuban

        JMM对于这8中指令的使用,制定了如下的规则
            - 不允许read和load  store和write 操作之一单独出现,使用了store必须write
            - 不允许线程丢弃它最近的assign操作,及工作变量的数据改变了之后,必须告知主存
            - 不允许一个线程将没有assign的数据从工作内存同步刷新到主内存当中
            - 一个新的变量必须在主内存中诞生,不允许工作内存直接使用一个未被初始化的变量,就是对变量进行use,store
                之前必须经过load和assign操作
            - 一个变量同一时间只有一个线程能对其进行lock,多次lock后,必须执行相同次数的unlock才能解锁
            - 如果对一个变量进行lock操作,会清空所有工作内存中此变量的值,在执行引擎使用这个变量前,必须重新load
                或assign操作,初始化变量的值
            - 如果一个变量没有被lock,就布恩那个对其进行unlock操作,也不能一个被其他线程锁住的变量
            - 对一个变量进行unlock前,必须把变量同步到主存之中
    volatile
        1.保证可见性
            Demo01.java 和Demo02.java

        2.不保证原子性
            原子性:不可分割
                线程A在执行任务的时候是不能被打扰的,也不能被分割,要么同时成功,要么同时失败
            Demo03.hava

            问题:如果不加synchronized和lock怎么保证原子性
                使用原子类解决原子性问题.Atomic  详见Demo04

        3.禁止指令重排序
            指令重排序: CPU会对指令重新排序优化效率
                本质概括一下就是计算机只会保证你的代码执行结果是对的,但是并不保证顺序是按照你的代码顺序来执行的

            int x = 1; //1
            int y = 2; //2
            x = x + 5; //3
            y = x * x; //4

            我们所期望的计算机执行顺序是1234, 但是有可能执行的时候是,1324,2134

            单线程的前提下是永远不可能出现指令重排序后发生的异常问题的但是,如果在多线程前提下就有可能出现这样的问题

                例如   线程A          线程B
                  顺序 1324          1234
                      int x = 1;    int x = 1;
                      x = x + 5;    int y = 2;
                      int y = 2;    x = x + 5;
                      y = x * x;    y = x * x;
                两个线程启动之后,CPU会对指令进行重新排序,线程A重排序后执行顺序是1324,线程B是1234,
                    当线程A执行到第二步的时候,也就是x = x + 5;此时x的值已经是6,那么线程B在执行的时候.
                    会出现代码异常结果;


            volatile为什么可以避免指令重排序?
                是由于内存屏障,CPU指令,
                内存屏障的作用就是禁止指令重排序和解决内存可见性的问题

----------------------------------------------------------------------------------------
19.单例模式
    详见com.doer.single

----------------------------------------------------------------------------------------
20.深入理解CAS
    什么是CAS 详见com.doer.cas.CASDemo
       比较并交换,比较当前工作内存中的值和主内存中的值,如果这个值是期望的,那么则执行交换操作,如果不是期望的值
       一直循环,

    详见  IDEA/huatuban  感觉认识很细腻了
    缺点:
    1,由于底层是自旋循环,会耗时
    2,一次性只能保证一个共享变量的原子性

    3.ABA问题  详见com.doer.cas.CASDemo02
    如何解决ABA问题,
    ABA问题的根本在于cas在修改变量的时候，无法记录变量的状态，比如修改的次数，
         否修改过这个变量。这样就很容易在一个线程将A修改成B时，另一个线程又会把B修改成A,造成casd多次执行的问题。

    因为CAS会检查旧值有没有发生变化,这题存在一个很有意思的问题,比如一个旧值A变成了B,然后又变成了A,刚好在做
        CAS时检查发现旧值并没有发生变化,依然位A,但实际上的确发生了变化,解决方案可以沿袭数据库中常用的乐观锁的
        方式,添加一个版本号可以解决
        也就是原子引用
        ,在JDK1.5之后的atomic包中提供了AtomicStampedReference来解决ABA问题,解决思路就是这样的

----------------------------------------------------------------------------------------
21.原子引用
    带版本号的原子操作
    详见com.doer.cas.ABADemo03

22.各种锁的理解
    1.公平锁,非公平锁
        Lock中有实现,默认无参构造是非公平锁,

        公平锁:十分公平,先来后到
        非公平锁:十分不公平,抢占资源,插队

    2.可重入锁

    3.自旋锁,
        不断地尝试知道成功为止,在CAS原理的底层就是自旋锁
