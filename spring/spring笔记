1.Spring简介
    spring的三个核心:详见HelloSpring
        1.所有的类都需要装配到bean里面
        2.所有的bean都需要通过容器去取
        3.容器里面取得这个bean就是一个对象,可以直接使用

    spring理念:使现有的技术更加容易使用,本身是一个大杂烩,整合了现有的技术框架

    SSH:Struct2 +Spring +Hibernate
    SSM:SpringMVC+ Spring +Mybatis

    官网:https://spring.io/projects/spring-framework

    1.1 Spring优点
        Spring是一个开源的免费的框架(容器)
        Spring是一个轻量级的,非入侵的框架
        控制反转(IOC),面向切面编程(AOP)
        支持事务处理,对框架整合的处理

        总结一句话,Spring就是一个轻量级的控制反转(IOC)和面向切面编程(AOP)的框架

    Spring Boot
        一个快速开发的脚手架
        基于Spring Boot可以快速的开发单个微服务
        约定大于配置

    Spring Cloud
        Spring Cloud是基于SpringBoot实现的

    因为现在大多数公司都在使用SpringBoot开发,学习SpringBoot的前提,需要完全掌握Spring即SpringMVC

    spring弊端:
        发展太久之后,违背了原来的理念,配置十分繁琐,人称"配置地狱"

-------------------------------------------------------------------------------------
2.IOC理论推导
    IOC本质是一种设计思想,DI(依赖注入)是实现IOC的一种方法,也有人认为,DI只是IOC的另一种说法,没有IOC的
        程序中,我们使用面向对象编程,对象的创建与对象间的依赖关系完全编码在程序当中,对象的创建由程序自己控制
        控制反转之后,将对象的创建交给了第三方,个人认为所谓的控制反转就是:获得依赖对象的方式反转了

      采用XML配置Bean的时候,Bean的定义信息是实现分离的,而采用注解的方式可以把两者合为一体,Bean的
        定义信息直接以注解的形式定义在实现类中,从而达到了零配置的目的

    控制反转是一种通过描述(XML或注解)并通过第三方去生产获取特定对象的方式,在Spring中实现控制反转
        的是IOC容器,其实现方式是依赖注入 (Dependence Injection,DI)

-------------------------------------------------------------------------------------
3,HelloSpring
    详见com.doer.pojo.Hello.java

    <!--使用spring创建我们的对象,,在Spring这些都成为Bean
            这里的bean = 对象, 相当于new Hello();
            java的 代码层面是
            类型   变量名  = new 类型()
            Hello hello = new Hello();

            这里的id 就是变量名
            class 就是new 的对象
            property相当于给属性设置的一个值
        -->
    <bean id="hello" class="com.doer.pojo.Hello">
        <property name="str" value="Spring"/>
    </bean>

    这是测试类
    public class com.doer.MyTest {
        public static void main(String[] args) {
            //获取Spring的上下文对象
            ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
            //我们的对象现在都在Spring中管理了,我们要使用,直接去里面取出来即可
            Hello hello = (Hello) context.getBean("hello");
            System.out.println(hello.toString());
        }
    }

    问题Hello 对象是有谁创建的?  ===>Hello对象是由Spring创建的,属性也是Spring容器设置的

    这个过程就叫做控制反转,
        控制:射来控制对象的创建,川童应用程序的对象是由程序本身控制创建的,使用Spring后,对象是由Spring来创建的
    反转:程序本身不创建对象,而变成被动的接收对象

    依赖注入:就是利用set方法来进行注入的,
    IOC是一种编程思想,由主动的编程编程被动的编程

    所谓的IOC一句话搞定,对象由Spring来创建,管理,装配
-------------------------------------------------------------------------------------
4.IOC创建对象的方式
    1.使用无参构造创建对象,默认是无参构造方法
    2.使用有参构造创建对象
        1.下标赋值
            详见test.java.com.doer.MyTest02.java
                <bean id="user" class="com.doer.ioc.User">
                  <constructor-arg index="0" value="Doer"/>
                </bean>
        2.通过类型创建对象
            <!--    第二种方式,通过类型创建,不建议使用,因为如果有参构造方法的参数有两个就会出现问题 -->
            <!--    <bean id="user" class="com.doer.ioc.User">-->
            <!--        <constructor-arg type="java.lang.String" value="Doer"/>-->
            <!--    </bean>-->

        3.直接通过参数名来创建对象
            <bean id="user" class="com.doer.ioc.User">
            <constructor-arg name="name" value="Doer"/>
            </bean>

    总结:在配置文件加载的时候,容器中管理的对象就已经初始化了
-------------------------------------------------------------------------------------
5.Spring配置
    5.1,别名
        <!--    通过别名也可以获取到这个对象-->
        <alias name="user" alias="nihaoshijie"/>

    5.2,Bean的配置
            <!--
            id: bean的唯一标识符,也就是相当于我们javaSE阶段的对象名,引用
            class:bean对象所对应的全限定名 :包名+类名
            name :也是别名,而且name可以同时起多个别名
            -->

            <bean id="user2" class="com.doer.ioc.User2" name="user22,user23">
                <property name="name" value="doer"/>
            </bean>
    5.3,import导入
        这个import,一半用于团队开发使用,它可以将多个配置文件,导入合并为一个
        假设现在项目中有多个人开发,这三个人负责不同的类开发,不同的类需要注册在不同的bean中,我们可以利用import
        将所有人的beans.xml合并为一个总的.
            - 张三
            - 李四
            - 王五
            - applicationContext.xml
            <import resource="beans.xml"/>
            <import resource="beans2.xml"/>
        使用的时候,直接使用总的配置就可以了
-------------------------------------------------------------------------------------


6.DI依赖注入 详见spring01-dic模块
    6.1 构造器注入
           就是4中的构造器方式,无参构造和有参构造
    6.2 set方式注入[重点]
        依赖注入 set注入
        依赖:bean对象的创建依赖于容器
        注入:bean对象中的所有属性,由容器来注入

        [环境搭建]
        1.复杂类型
            @Getter
            @Setter
            @NoArgsConstructor
            @AllArgsConstructor
            @ToString
            public class Student {
                private String name;
                private Address address;
                private String[] books;
                private List<String> hobbys;
                private Map<String,String> card;//学生卡
                private Set<String> game;
                private Properties info;
                private String wife;

        2.真是测试对象
        @Setter
        @Getter
        public class Address {
            private Address address;
        }

        3.bean
                <bean id="address" class="com.doer.Address">
                    <property name="address" value="西安"/>
                </bean>
                <bean id="student" class="com.doer.Student">

                    <!--第一种:普通值的注入,value的方式-->
                    <property name="name" value="朵儿"/>

                    <!--第二种注入,bean注入,使用ref注入-->
                    <property name="address" ref="address"/>

                    <!--数组注入-->
                    <property name="books" >
                        <array>
                            <value>红楼梦</value>
                            <value>西游记</value>
                            <value>水浒传</value>
                            <value>三国演义</value>
                        </array>
                    </property>


                    <!--List注入-->
                    <property name="hobbys">
                        <list>
                            <value>听歌</value>
                            <value>敲代码</value>
                            <value>看电影</value>
                        </list>
                    </property>


                    <!--Map注入-->
                    <property name="card">
                        <map>
                            <entry key="身份证" value="6101010"/>
                            <entry key="银行卡" value="464546"/>
                        </map>
                    </property>

                    <!--Set-->
                    <property name="game">
                        <set>
                            <value>lol</value>
                            <value>coc</value>
                            <value>bob</value>
                        </set>
                    </property>

                    <!--null-->
                    <property name="wife">
                        <null></null>
                    </property>

                    <!--Properties-->
                    <property name="info">
                        <props>
                            <prop key="学号">18050412106</prop>
                            <prop key="性别">男</prop>
                            <prop key="username">root</prop>
                            <prop key="password">123456</prop>
                        </props>
                    </property>
                </bean>
    6.3 扩展方式注入
        我们可以使用p命名空间和c命名空间注入

            <!--p命名空间的注入需要依赖第三方 set方式的注入
                   xmlns:p="http://www.springframework.org/schema/p"
            -->
            <bean id="user" class="com.doer.User" p:name="朵儿" p:age="18"/>

            <!-- c命令空间的注入,构造器的方式注入-->
            <bean id="user2" class="com.doer.User" c:age="18" c:name="doer"/>

        注意:p命名和c命名不能直接使用,需要导入xml约束


    6.4 bean的作用域
        1.单例模式,(Spring默认机制)

            <bean id="user2" class="com.doer.User" c:age="18" c:name="doer" scope="singleton"/>
        2.原型模式,
            每次从容器中getBean的时候都会产生一个新的对象
            scope="singleton
        3.其余的 request,session,application 这些只能在web开发中使用


-------------------------------------------------------------------------------------
7.Bean的自动装配 详见spring02-Autowired模块
    自动装配是Spring满足bean依赖的一种方式
    Spring会在上下文中自动寻找,并自动给Bean装配属性

    在Spring中有三种装配的方式
        1.在xml中显示的配置
        2.在java中显示配置
        3.隐式的自动装配bean[重要]

    7.1测试
        环境搭配:一个人有两个宠物

    7.2 ByName自动装配
       <!--
            byName: 会自动在容器上下文路径中查找,和自己对象set方法后面的值对应的 bean的id
        -->
        <bean id="people" class="com.doer.pojo.People" autowire="byName">
            <property name="name" value="doer"/>

    7.3 ByType自动装配
     byType: 会自动子容器上下文中查抄,和自己对象属性类型相同的bean
        <bean id="people" class="com.doer.pojo.People" autowire="byType">
                <property name="name" value="doer"/>
        <!--        <property name="cat" ref="cat"/>-->
        <!--        <property name="dog" ref="dog"/>-->


    小结:byName的时候,需要保证所有的bean的id唯一,并且这个bean需要和自动注入的属性的set方法的值一样
        byType的时候,需要保证所有bean的class唯一,并且这个bean需要和自动注入的属性类型一致

    7.4 使用注解实现自动装配
        基于注解的配置的引入提出了这种方法是否比 XML“更好”的问题

        要使用注解须知:
            1.导入约束 context约束
            2.配置注解的支持
                <?xml version="1.0" encoding="UTF-8"?>
                <beans xmlns="http://www.springframework.org/schema/beans"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xmlns:context="http://www.springframework.org/schema/context"
                    xsi:schemaLocation="http://www.springframework.org/schema/beans
                        https://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/context
                        https://www.springframework.org/schema/context/spring-context.xsd">

                    <context:annotation-config/>

                </beans>

            直接输入<context:annotation-config/> IDEA也会自动生成
        @Autowired

            @Autowired是自动化注入,首先按照类型注入,如果bean的类型只有一个则成功,如果bean的类型十多个
                则会按照byName名称注入,如果找到了则成功,否则失败
            直接在属性上使用即可
            使用Autowired我们可以不用编写Set方法,前提是你这个自动装配的属性在IOC(Spring)容器中存在,且名字是
                byName!

        @Nullable 字段标记了这个注解,说明这个字段可以为null
            public @interface Autowired {
             	boolean required() default true;
            }
            就是如果显式定义了Autowired的required属性为false,说明这个对象可以为null,否则不允许为空

       如果Autowired自动装配的环境比较复杂,自动装配无法通过一个注解[@Autowired]完成的时候,我们可以使用
       @Qualifier(value="???")去配合@Autowired的使用,指定一个唯一的bean对象

       @Resource注解
            public class People{
                @Resource(name="cat2")
                private Cat cat;

                @Resource
                private Dog dog
            }

       小结:
        @Resource 和 @Autowired
            都是用来自动装配,都可以放在属性字段上
            @Autowired默认是通过ByType方式实现,bean的class类型只有一个则会成功,class类型如果是多个则会通过
                byName方式进行匹配实现,如果id类型也不匹配,则装配失败,而且必须要求这个对象存在

            @Resource 和@Autowired刚好相反,先用ByName在这是ByType

-------------------------------------------------------------------------------------


8.使用注解开发
    1.bean

    2.属性怎么注入
        @Component
        public class User {
            //等价于<property name="name" value="朵儿"/>
            @Value("朵儿")
            public String name;
        }
    3.衍生的注解
        @Component有几个衍生注解,我们在Web开发中会按照mvc三层架构分层
        - Dao[@Repository]
        - service [Service]
        - controller [@Controller]
        这四个注解的功能都是一样的,都是将某个类注册到Spring容器中,装配Bean
    4.自动装配置
        - @Autowired 自动装配,通过类型,名字
        @Autowired是自动化注入,首先按照类型注入,如果bean的类型只有一个则成功,如果bean的类型十多个
                        则会按照byName名称注入,如果找到了则成功,否则失败
        - @Nullable字段标记了这个注解,说明这个字段可以为null
        - @Resource注解 自动装配通过名字,类型
        - @Component:组件,放在类上,说明这个类被Spring管理了,就是bean
    5.作用域

    6.小结
        xml与注解
            xml更加万能,适合与任何场合,维护更加简单方便
            注解 不是自己的是用不了,维护相对复杂

        xml与注解的最佳实践
            xml用来管理bean
            注解只负责完成属性的注入

            我们在使用的过程中,只需要注意一个问题,必须让注解生效,就需要开启注解的支持
-------------------------------------------------------------------------------------




9.完全使用java的方式配置spring  ** 详见spring04-appconfig模块

    完全不适用spring的xml配置了,全部交给java来做

    javaConfig是Spring的一个子项目,在Spring4之后,它成为了一个核心功能

-------------------------------------------------------------------------------------



10.代理模式
    为什么要学习代理模式? 因为这就是SpringAOP的底层[SpringAOP 和 SpringMVC]

    代理模式的分类
        静态代理
        动态代理
10.1: 静态代理 详见spring05模块  com.doer.demo01.*;
    角色分析:
        抽象角色:一般会使用接口或者抽象类来解决
        真实角色:被代理的角色
        代理角色:代理真实角色,代理真实角色后,一般会做一些附属操作
        客户:访问代理对象的人


    代码步骤:
        1.接口:com.doer.demo01.Rent
        2.真实角色:房东  com.doer.demo01.Host
        3.代理角色:中介  com.doer.demo01.Proxy
        4.客户端访问中介 com.doer.demo01.Client


    代理模式的好处:
        可以是真实角色的操作更加纯粹,不去关注一些公共的业务
        公共也就交给代理角色,实现了业务的分工
        公共业务发生扩展的时候,方便集中管理
    缺点:
        一个真实角色就会产生一个代理角色,代码量会翻倍~开发效率会变低

10.2: 动态代理  详见 详见spring05模块 demo03.* 和demo04.*;
    动态代理和静态代理角色一样
    动态代理的代理类是动态生成的,不是我们直接生成的
    动态代理分为两大类: 基于接口的动态代理 ,基于类的动态代理
        基于接口---JDK动态代理 <我们在这里使用>
        基于类 cglib
        java字节码实现 JavaAssist

    需要两个类
        Proxy:代理, InvocationHandler:调用处理程序
    总结:
        Proxy类是生成动态代理对象的,    InvocationHandler是调用处理程序并返回结果的,也就是用处理程序实现的接口

        动态代理的好处:
            可以是真实角色的操作更加纯粹,不去关注一些公共的业务
            公共也就交给代理角色,实现了业务的分工
            公共业务发生扩展的时候,方便集中管理
            一个动态代理类代理的是一个接口,一般就是对应的一类业务
            一个动态代理可以代理很多类,只要实现了同一个接口既可.
-------------------------------------------------------------------------------------

11 AOP
    11.1: 什么是AOP
        AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统
        一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一
        种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用
        性，同时提高了开发的效率。

    11.2: AOP的作用
        横切代码的高度复用，和业务代码互相独立，满足代码设计上的高内聚低耦合
        系统更好的扩展性，可维护性

    11.3 使用Spring实现AOP
        使用AOP织入,首先导入依赖包
        <!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.6</version>
        </dependency>

        方式一: 使用SpringAPI接口实现

               详见模块6的 log包和service包 主要是配置文件
        方式二: 自定义类实现AOP[主要是切面定义]
                详见diy包
        方式三:使用注解实现
            详见 div.AnnotationPointCut.java
            <!--方式三 注解实现AOp-->
            <bean id="annotationPointCut" class="com.doer.diy.AnnotationPointCut"/>
            <!--开启注解支持-->
            <aop:aspectj-autoproxy/>

-------------------------------------------------------------------------------------------
12.整合mybatis
   步骤:
    1.导入相关jar包
        junit
        mybatis
        mysql数据库
        spring相关的
        aop织入
        mybatis-spring
    2.编写配置文件
    3.测试

12.1: 回忆mybatis
    1.编写实体类
    2.编写核心配置文件
    3.编写接口
    4.编写Mapper.xml
    5.测试


