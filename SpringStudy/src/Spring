1.Spring简介
    spring理念:使现有的技术更加容易使用,本身是一个大杂烩,整合了现有的技术框架

    SSH:Struct2 +Spring +Hibernate
    SSM:SpringMVC+ Spring +Mybatis

    官网:https://spring.io/projects/spring-framework

    1.1 Spring优点
        Spring是一个开源的免费的框架(容器)
        Spring是一个轻量级的,非入侵的框架
        控制反转(IOC),面向切面编程(AOP)
        支持事务处理,对框架整合的处理

        总结一句话,Spring就是一个轻量级的控制反转(IOC)和面向切面编程(AOP)的框架

    Spring Boot
        一个快速开发的脚手架
        基于Spring Boot可以快速的开发单个微服务
        约定大于配置

    Spring Cloud
        Spring Cloud是基于SpringBoot实现的

    因为现在大多数公司都在使用SpringBoot开发,学习SpringBoot的前提,需要完全掌握Spring即SpringMVC

    spring弊端:
        发展太久之后,违背了原来的理念,配置十分繁琐,人称"配置地狱"


2.IOC理论推导
    IOC本质是一种设计思想,DI(依赖注入)是实现IOC的一种方法,也有人认为,DI只是IOC的另一种说法,没有IOC的
        程序中,我们使用面向对象编程,对象的创建与对象间的依赖关系完全编码在程序当中,对象的创建由程序自己控制
        控制反转之后,将对象的创建交给了第三方,个人认为所谓的控制反转就是:获得依赖对象的方式反转了

      采用XML配置Bean的时候,Bean的定义信息是实现分离的,而采用注解的方式可以把两者合为一体,Bean的
        定义信息直接以注解的形式定义在实现类中,从而达到了零配置的目的

    控制反转是一种通过描述(XML或注解)并通过第三方去生产获取特定对象的方式,在Spring中实现控制反转
        的是IOC容器,其实现方式是依赖注入 (Dependence Injection,DI)

3,HelloSpring
    详见com.doer.pojo.Hello.java

    <!--使用spring创建我们的对象,,在Spring这些都成为Bean
            这里的bean = 对象, 相当于new Hello();
            java的 代码层面是
            类型   变量名  = new 类型()
            Hello hello = new Hello();

            这里的id 就是变量名
            class 就是new 的对象
            property相当于给属性设置的一个值
        -->
    <bean id="hello" class="com.doer.pojo.Hello">
        <property name="str" value="Spring"/>
    </bean>

    这是测试类
    public class com.doer.MyTest {
        public static void main(String[] args) {
            //获取Spring的上下文对象
            ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
            //我们的对象现在都在Spring中管理了,我们要使用,直接去里面取出来即可
            Hello hello = (Hello) context.getBean("hello");
            System.out.println(hello.toString());
        }
    }

    问题Hello 对象是有谁创建的?  ===>Hello对象是由Spring创建的,属性也是Spring容器设置的

    这个过程就叫做控制反转,
        控制:射来控制对象的创建,川童应用程序的对象是由程序本身控制创建的,使用Spring后,对象是由Spring来创建的
    反转:程序本身不创建对象,而变成被动的接收对象

    依赖注入:就是利用set方法来进行注入的,
    IOC是一种编程思想,由主动的编程编程被动的编程

    所谓的IOC一句话搞定,对象由Spring来创建,管理,装配

4.IOC创建对象的方式
    1.使用无参构造创建对象,默认是无参构造方法
    2.使用有参构造创建对象
        1.下标赋值
            详见test.java.com.doer.MyTest02.java
                <bean id="user" class="com.doer.ioc.User">
                  <constructor-arg index="0" value="Doer"/>
                </bean>
        2.通过类型创建对象
            <!--    第二种方式,通过类型创建,不建议使用,因为如果有参构造方法的参数有两个就会出现问题 -->
            <!--    <bean id="user" class="com.doer.ioc.User">-->
            <!--        <constructor-arg type="java.lang.String" value="Doer"/>-->
            <!--    </bean>-->

        3.直接通过参数名来创建对象
            <bean id="user" class="com.doer.ioc.User">
            <constructor-arg name="name" value="Doer"/>
            </bean>

    总结:在配置文件加载的时候,容器中管理的对象就已经初始化了
5.Spring配置
    5.1,别名
        <!--    通过别名也可以获取到这个对象-->
        <alias name="user" alias="nihaoshijie"/>

    5.2,Bean的配置
            <!--
            id: bean的唯一标识符,也就是相当于我们javaSE阶段的对象名,引用
            class:bean对象所对应的全限定名 :包名+类名
            name :也是别名,而且name可以同时起多个别名
            -->

            <bean id="user2" class="com.doer.ioc.User2" name="user22,user23">
                <property name="name" value="doer"/>
            </bean>
    5.3,import导入
        这个import,一半用于团队开发使用,它可以将多个配置文件,导入合并为一个
        假设现在项目中有多个人开发,这三个人负责不同的类开发,不同的类需要注册在不同的bean中,我们可以利用import
        将所有人的beans.xml合并为一个总的.
            - 张三
            - 李四
            - 王五
            - applicationContext.xml
            <import resource="beans.xml"/>
            <import resource="beans2.xml"/>
        使用的时候,直接使用总的配置就可以了

6.DI依赖注入
    6.1 构造器注入
           就是4中的构造器方式,无参构造和有参构造
    6.2 set方式注入[重点]
        依赖注入 set注入
        依赖:bean对象的创建依赖于容器
        注入:bean对象中的所有属性,由容器来注入

        [环境搭建]
        1.复杂类型

        2.真是测试对象
    6.3 扩展方式注入