1.什么是JMM
        JMM:(Java Memory Model的缩写)
2.JMM的作用
    JMM虚拟机试图定义了一种Java内存模型
        来屏蔽其他操作系统和各个硬件平台访问的差异
        以实现java程序在各种平台下都能达到一致的内存访问效果

    JMM定义了java线程工作内存与主内存之间的一种特殊的抽象关系,也就是说,线程之间的共享变量
        是存储在主内存当中的,而每一个线程都有各自的工作内存,

3.面试题:JMM定义了什么?
    整个java内存模型实际上围绕着三个特征建立起来,分别是:原子性,可见性,有序性,
    这三个特征可谓是整个java并发的基础


    ① 原子性:原子性是指一个操作是不可分割的,不可中断的,一个线程在执行的过程是不会被其他线程干扰的

        面试官拿笔写了段代码，下面这几句代码能保证原子性吗？
            int i = 2;
            int j = i;
            i++;
            i = i + 1;
            第一句是基本类型赋值操作，必定是原子性操作。

            第二句先读取i的值，再赋值到j，两步操作，不能保证原子性。

            第三和第四句其实是等效的，先读取i的值，再+1，最后赋值到i，三步操作了，不能保证原子性

    ② 可见性:可见性是指当一个线程修改了一个共享变量的值之后,其他线程能够立即知道该共享变量被修改了
        java是利用volatile关键字来提供可见性的,当共享变量被volatile关键字修饰时,这个变量
        被修改后会立即刷新到主内存当中,当其他线程需要读取这个变量的时候,会从主内存中读取新值,而
        普通变量则不能做到这一点

        除了volatile关键字之外，final和synchronized也能实现可见性。

        synchronized的原理是，在执行完，进入unlock之前，必须将共享变量同步到主内存中。

        final修饰的字段，一旦初始化完成，如果没有对象逸出（指对象为初始化完成就可以被别的线程使用），
            那么对于其他线程都是可见的。

    ③有序性
        有序性
        在Java中，可以使用synchronized或者volatile保证多线程之间操作的有序性。实现原理有些区别：

        volatile关键字是使用内存屏障达到禁止指令重排序，以保证有序性。

        synchronized的原理是，一个线程lock之后，必须unlock后，其他线程才可以重新lock，
            使得被synchronized包住的代码块在多线程之间是串行执行的。
