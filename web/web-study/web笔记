一.基本概念(web 网页)
   1.静态web
        html,css
        提供给所有人看的数据始终不会发生变化!

   2.动态web
        例如:淘宝,几乎所有的网站;
        提供给所有人看到的数据始终会发生变化,每个人在不同的时间,不同的地点看到的信息不相同!
        技术栈:Servlet/JSP,ASP,PHP

        在java中,动态web资源开发的技术统称为javaWeb

二.web应用程序
    web应用程序:可以提供浏览器访问的程序.
        a.html , b.html......多个web资源,这些web资源可以被外界访问,对外界进行访问
        能访问到的任何一个页面或者资源,都存在这个世界的某一个角落的计算机上
        URL
        这个统一的web资源会被放在同一个文件夹上 ,web应用程序--->Tomcat:服务器
        一个web应用有多个部分组成
            html,css,js
            jsp,servlet
            java程序
            jar包
            配置文件

    web应用程序编写完成后,若想提供给外界访问,需要一个服务器来统一管理
三:web服务器
    ASP:
        微软:国内最早流行的就是ASP
        在HTML中嵌入了VB的脚本
        在ASP开发中,基本一个页面都有几千行的业务代码,页面极其混乱,维护成本很高

    PHP:
        PHP开发速度很快,功能很强大,跨平台,代码很强大()
        无法承载大访问量的情况下(局限性)


    JSP/Servlet
       B/S :浏览器和服务器
       C/S :客户端和服务器
        sun公司主推的的B/S架构
        基于java语言,所有的大公司或者一些开源的组件,都是java写的
        可以承载三高问题带来的影响;


    web服务器
        服务器是一种被动的操作,用来处理用户的一些请求和给用户一些响应信息

        IIS:
            微软的:ASP程序,Windows中自带的

        Tomcat:
            bin :   启动,关闭脚本文件
            conf:   配置
            lib :   依赖的jar包
            logs:   日志
            webapps: 放存放网站的


    ##高度面试题
        请你谈一谈网站是如何进行访问的

        1.输入一个域名;回车
        2.检查本机的C:\Windows\System32\drivers\etc\hosts配置文件有没有这个域名映射
            ①有:直接返回对应的ip地址,在这个地址中,有我们需要访问的web程序,可以直接访问
                127.0.0.1   localhost

            ②没有:去DNS服务器找.找到的话就返回,找不到就会报错.

四:Http
4.1什么是http
    http(超文本传输协议)是一种简单的请求响应协议,它通常运行在TCP之上,
        文本:html,字符串~~~
        超文本:图片,音乐,视频,定位,地图
        http默认端口:80

    Https:安全的
        默认端口443

4.2.两个时代
    http1.0
        HTTP/1.0:客户端可以与文本服务器连接后,只能获得一个web资源,断开连接
    http2.0
        HTTP/1.1:客户端可以与文本服务器连接后,可以获得多个web资源,

4.3.Http请求
    客户端--发请求--服务器
        百度:
            Request URL: https://www.baidu.com/  请求地址
            Request Method: GET                  get方法
            Status Code: 200 OK                  状态码:200
            Remote Address: 36.152.44.95:443     远程地址
            Referrer Policy: strict-origin-when-cross-origin

            Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
            Accept-Encoding: gzip, deflate, br
            Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7
            Cache-Control: no-cache


    1.请求行:
        请求行中的请求方式:get
        请求方式:Get,Post Head,Delete,Put
            get:请求能够携带的参数比较少,大小有限制,会在浏览器中的URL地址栏显示数据内容,不安全但高效
            post 请求能够携带的参数没有限制,大小没有限制,不会在浏览器中的URL地址栏显示数据内容,
                安全但不高效

    2.消息头
        Accept: 告诉浏览器,他所支持的数据类型
        Accept-Encoding: :支持哪种编码格式,GBK UTF-8 GB2312
        Accept-Language: 告诉浏览器他的语言环境
        Cache-Control:  缓存控制
        Connection:告诉浏览器,请求完成是断开还是保持连接
        Host: 主机.../

4.4.Http响应
    服务器--响应--客户端
         百度:
            Cache-Control: private          缓存控制
            Connection: keep-alive          连接:保持连接
            Content-Encoding: gzip          编码
            Content-Type: text/html;charset=utf-8   类型

    1.响应体
        Accept: 告诉浏览器,他所支持的数据类型
        Accept-Encoding: :支持哪种编码格式,GBK UTF-8 GB2312
        Accept-Language: 告诉浏览器他的语言环境
        Cache-Control:  缓存控制
        Connection:告诉浏览器,请求完成是断开还是保持连接
        Host: 主机.../
        Refresh:告诉客户端,多久刷新一次
        Location:让网页重新定位
    2.响应状态码
        200: 请求响应成功
        3XX: 请求重定向
            重定向:你重新到我给你的新位置去
        4XX :服务器找不到资源
        5XX: 服务器代码错误
            502:网关错误

    常见面试题:
        当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来,经历了什么?

五:Maven
    为什么要学习使用Maven技术?
    1.在javaWeb开发中,需要使用大量的jar包,这种jar包需要手动去导入

    2.如何能够让一个东西自动帮我们导入配置这个jar包
        由此.Maven诞生了!

    5.1 Maven架构管理工具
        我们目前用来就是方便导入jar包的!
        Maven的核心思想:约定大于配置
            有约束,不要去违反

        maven会规定号你如何去编写我们的java代码,,必须按照这个规范来


    5.2在IDEA中使用maven
        1.启动IDEA
        2.创建一个Maven项目
        3.IDEA中的maven设置
        4.maven目录:
            src/main/java : 放置java代码的
            src/main/resources: 放置一些配置文件的
            src/test/java: 测试使用
            src/main/webapp:web的配置
        5.在IDEA中配置tomcat
            Run--->Edit Configurations --->添加Tomcat Servlet
                配置需要设置Artifact 设置默认路径

六:Servlet<重点>
    6.1.Servlet简介
        Servlet就是sun公司开发动态web的一门技术
        sun公司在这些API中提供了一个接口叫做:Servlet,如果你想开发一个Servlet程序,只需要完成两个小步骤:
            编写一个类,实现Servlet接口,
            把开发好的java类部署到web服务器当中

        也就是说把实现了Servlet接口的java程序叫做,Servlet

    6.2.编写一个Servlet程序
        1.编写一个普通类
        2.实现Servlet接口,这里我们直接继承HttpServlet


    6.3.编写Servlet映射
        为什么需要映射:我们写的是java程序,但是需要通过浏览器来访问,而浏览器需要连接web服务器,所以我们需要web
            服务中注册我们写的Servlet,还需要给他一个浏览器能够访问的路径

    6.4.Servlet原理
        Servlet是由web服务器调用,web服务器在接收到浏览器请求之后,会
        前端浏览器发送请求到web服务器,也就是Tomcat,web服务器收到请求之后,把请求转发给Servlet,Servlet根据请求
        进行处理,再将响应返回给服务器,服务器响应给前端

    6.5 ServletContext <详见servletContext.ServletContextTest01.class
                           servletContext.ServletContextTest02.class
                    >
        web容器在启动的时候,,他会为每个web程序创建一个对应的ServletContext对象,他代表了当前的web应用

        ①.共享数据(对应ServletContextTest01 和 ServletContextTest02)
            我在这个Servlet中保存的数据,可以在另一个Servlet中访问到;
            @WebServlet("/hello2")
            public class ServletContextTest01 extends HttpServlet {
                @Override
                protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    //this.getInitParameter() 初始化参数
                    //this.getServletConfig() //Servlet配置
                    //this.getServletContext() Servlet上下文
                    ServletContext servletContext =  this.getServletContext();
                    String username = "doer";//数据
                    servletContext.setAttribute("username",username); //将一个数据保存到ServletContext中


                }
            }
            @WebServlet("/getContext")
            public class ServletContextTest02 extends HttpServlet {
                @Override
                protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    ServletContext servletContext =  this.getServletContext();

                    String username =(String)servletContext.getAttribute("username");

                    resp.setContentType("text/html");
                    resp.setCharacterEncoding("utf-8");
                    resp.getWriter().print("名字" + username);
                }
            }


        ②请求转发(对应Test04)
            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    System.out.println("进入了ServletTest04");
                    ServletContext servletContext = this.getServletContext();

                    //参数是转发的路径
                    RequestDispatcher requestDispatcher = servletContext.getRequestDispatcher("/ServletTest01");
                    requestDispatcher.forward(req,resp);//

                }
        ③读取资源文件
            Properties


    6.6 HttpServletResponse
        web服务器接收客户端的http请求,会针对这个请求分别创建一个代表响应的HttpServletResponse对象
        代表请求的HttpServletRequest对象;

        1.简单分类
            负责向浏览器发送数据的方法
                ServletOutputStream getOutputStream() throws IOException
                PrintWriter getWriter() throws IOException

            负责像浏览器发送响应头的方法
                public void setIntHeader(String name, int value);
                public void setStatus(int sc);
                public void setCharacterEncoding(String charset);
                public void setContentLength(int len);
                public void setContentType(String type);
        2.常见应用
            1:向浏览器输出信息<详见response.HelloServlet.class>
                resp.getWriter().print(?????);
                resp.getWriter().write(String string)
            2.下载文件<详见response.HttpResponseTest01.class>
                1.要下载的文件路径
                2.下载的文件名是啥
                3.设置想办法让浏览器能够支持下载我们需要的东西
                4.获取下载文件的输入流
                5.创建缓冲区
                6.获取OutputStream对象
                7.将FileOutputStream写入到buffer缓冲区中
                8.使用OutputStream将缓冲区中的数据输出到客户端

            3.验证码功能<详见response.ImageServlet.class>
                验证码怎么来的?
                    前端实现
                    后端实现,要用到java的图片类,生成一个图片

            4.实现重定向(重点)<详见response.RedirectServlet.class
                    response.RequestTest.class与index.jsp>
                一个web资源收到客户端请求,请求会通知客户端去访问另外一个web资源叫做重定向

                常见场景:
                    用户登录
                public void sendRedirect(String location) throws IOException;

                代码实现:
                    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                            resp.sendRedirect("./image");
                    }
                面试题:请你聊聊重定向和转发的区别?
                    相同点:
                        页面都会实现跳转

                    不同点:
                        请求转发的时候,url不会发生变化
                        重定向的时候,url地址会发生变化


    6.7 HttpServletRequest<详见LoginServlet.class>
        代表客户端的请求,通过http协议访问服务器,HTTP请求中所有信息都被封装到HttpServletRequest,
        通过HttpServletRequest中的方法,获取客户端的所有信息

        1.拿取前端传递的参数
            req.getParameter(String s)   返回类型String
            req.getParameterValues(String s) 返回String[]

        2.请求转发
             protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    String username =  req.getParameter("username");
                    String password = req.getParameter("password");

                    System.out.println("===========================");
                    System.out.println(username);
                    System.out.println(password);

                    //通过请求转发
                    resp.setCharacterEncoding("utf-8");
                    req.getRequestDispatcher("./success.jsp").forward(req,resp);
                }



    6.8 Cookie / Session
        6.8.1 会话:
                用户打开一个浏览器,点击了很多超链接,访问多个web资源,关闭浏览器,这个过程可以称之为会话

                有状态会话:一个同学来过教室,下次再来教室我们就会知道这个同学曾经来过,称之为有状态会话
                    你能怎么证明你是大学学生?
                        1.发票
                        2.学校登记

                    一个网站怎么证明你来过?
                        客户端      服务端
                            客服端怎么证明在服务端来过呢>
                        1.服务端给客户端一个信件,客户端下次访问服务端带上信件就可以了;cookie
                        2.服务器登记你来过了,下次你来的时候匹配你.session

        6.8.2 保存会话的两种技术
            cookie
                客户端技术(响应,请求)

            session
                服务器技术,利用这个技术可以保存用户的会话信息;我们可以把信息或者数据放在Session中!

                常见技术:网站登录之后,你下次不用再登录了,第二次登录的时候就直接上去了

        6.8.3 Cookie
            1.从请求中拿到cookie信息
            2.服务器相应给客户端cookie

            3.步骤
                ①:Cookie[] cookies = req.getCookies();  获得cookie
                ②:cookie.getName() 获得cookie中的key
                ③:cookie.getValue() 获取cookie中的值
                ④:new Cookie("lastLoginTime",System.currentTimeMillis()+"");  新建一个Cookie
                ⑤:cookie.setMaxAge(24*60*60) 设值cookie的有效期
                ⑥:resp.addCookie(cookie);响应给客户端一个cookie

            4.一个网站cookie是否存在上线,聊聊细节问题
                一个cookie只能保存一个信息
                一个web服务器可以给浏览器发送多个cookie,最多存放20个cookie
                Cookie大小有限制,比如4kb
                300个cookie浏览器上线

                删除cookie<详见com\doer\cookie\CookieTest01 02 03.java>
                    ①:不设置有效期,关闭浏览器,自动失效
                    ②:设置有效期时间为0
                编码解码
                URLEncoder.encode("朵儿","utf-8");
                URLDecoder.deCode(cookie.getValue(),"utf-8")

        6.8.4 Session 重点<详见session.*>
            什么是Session:
                服务器会给每一个用户(六篮球)创建一个Session对象
                一个Session独占一个浏览器,一个浏览器没有关闭,这个Session就存在
                用户登录之后,整个网站都可以访问!-->保存用户的信息,保存购物车的信息

            Session和Cookie的区别
                Cookie是吧用户的数据写给用户的浏览器保存(可以保存多个)
                Session是吧用户的数据写道用户独占的Session中,服务器端保存(保存重要信息,减少服务器资源的浪费)
                Session对象由服务器端创建

            使用场景:
                保存一个用户登录的信息
                购物车信息
                在整个项目中(网站中)经常会使用的数据,我们将他保存在Session中


