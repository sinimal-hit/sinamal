<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.mapper.DormMapper">
  <resultMap id="BaseResultMap" type="org.example.model.Dorm"
      extends="org.example.mapper.DictionaryTagMapper.BaseResultMap">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="dorm_no" jdbcType="VARCHAR" property="dormNo" />
    <result column="dorm_desc" jdbcType="VARCHAR" property="dormDesc" />
    <result column="building_id" jdbcType="INTEGER" property="buildingId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="building_name" property="buildingName" />
  </resultMap>
  <sql id="Base_Column_List">
    id, dorm_no, dorm_desc, building_id, create_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from dorm
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from dorm
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="org.example.model.Dorm" useGeneratedKeys="true">
    insert into dorm (dorm_no, dorm_desc, building_id, 
      create_time)
    values (#{dormNo,jdbcType=VARCHAR}, #{dormDesc,jdbcType=VARCHAR}, #{buildingId,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="org.example.model.Dorm" useGeneratedKeys="true">
    insert into dorm
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="dormNo != null">
        dorm_no,
      </if>
      <if test="dormDesc != null">
        dorm_desc,
      </if>
      <if test="buildingId != null">
        building_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="dormNo != null">
        #{dormNo,jdbcType=VARCHAR},
      </if>
      <if test="dormDesc != null">
        #{dormDesc,jdbcType=VARCHAR},
      </if>
      <if test="buildingId != null">
        #{buildingId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.example.model.Dorm">
    update dorm
    <set>
      <if test="dormNo != null">
        dorm_no = #{dormNo,jdbcType=VARCHAR},
      </if>
      <if test="dormDesc != null">
        dorm_desc = #{dormDesc,jdbcType=VARCHAR},
      </if>
      <if test="buildingId != null">
        building_id = #{buildingId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.example.model.Dorm">
    update dorm
    set dorm_no = #{dormNo,jdbcType=VARCHAR},
      dorm_desc = #{dormDesc,jdbcType=VARCHAR},
      building_id = #{buildingId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectOne" parameterType="org.example.model.Dorm" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from dorm
    <where>
      <if test="dormNo != null">
        and dorm_no = #{dormNo,jdbcType=VARCHAR}
      </if>
      <if test="dormDesc != null">
        and dorm_desc = #{dormDesc,jdbcType=VARCHAR}
      </if>
      <if test="buildingId != null">
        and building_id = #{buildingId,jdbcType=INTEGER}
      </if>
      <if test="createTime != null">
        and create_time = #{createTime,jdbcType=TIMESTAMP}
      </if>
    </where>
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, dorm_no, dorm_desc, building_id, create_time
    from dorm
  </select>
  <select id="selectByCondition" parameterType="org.example.model.Dorm" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from dorm
    <where>
      <if test="dormNo != null">
        and dorm_no = #{dormNo,jdbcType=VARCHAR}
      </if>
      <if test="dormDesc != null">
        and dorm_desc = #{dormDesc,jdbcType=VARCHAR}
      </if>
      <if test="buildingId != null">
        and building_id = #{buildingId,jdbcType=INTEGER}
      </if>
      <if test="createTime != null">
        and create_time = #{createTime,jdbcType=TIMESTAMP}
      </if>
    </where>
  </select>
  <delete id="deleteByIds" parameterType="java.util.List">
    delete from dorm
      where id in
    <foreach close=")" collection="list" item="item" open="(" separator=",">
      #{item}
    </foreach>
  </delete>




  <!-- 自定义SQL -->
  <select id="queryAsDict" resultMap="BaseResultMap">
    select
        id dictionary_tag_key,
        dorm_no dictionary_tag_value
    from dorm
        where building_id=#{id}
  </select>
  <select id="query" resultMap="BaseResultMap">
    select
        d.*,
        b.building_name
    from dorm d
        join building b on b.id=d.building_id
    <where>
      <if test="searchText!=null and searchText!=''">
        d.dorm_no like concat('%', #{searchText}, '%')
      </if>
    </where>
    order by d.id ${sortOrder}
  </select>
  <select id="queryById" resultMap="BaseResultMap">
    select
      d.*
    from dorm d
    where d.id=#{id}
  </select>
</mapper>